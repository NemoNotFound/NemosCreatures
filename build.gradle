import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
	id 'fabric-loom' version '1.11-SNAPSHOT'
	id 'maven-publish'
	id 'net.darkhax.curseforgegradle' version '1.1.27'
	id "com.modrinth.minotaur" version "2.+"
}

version = project.minecraft_version + "-" + project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

fabricApi {
	configureDataGeneration()
}

loom {
	accessWidenerPath = file("src/main/resources/nemos-creatures.accesswidener")

	runs {
		datagen {
			inherit client
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=${mod_id}"

			runDir "build/datagen"
		}
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	
	// Uncomment the following line to enable the deprecated Fabric API modules. 
	// These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.

	// modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

tasks.register('publishCurseForge', TaskPublishCurseForge) {
	dependsOn(tasks.remapJar)
	apiToken = System.getenv("CURSEFORGE_TOKEN")

	def projectId = findProperty('curseforge_project_id')

	def mainFile = upload(projectId, tasks.remapJar.archiveFile)
	mainFile.changelog = file('changelog.md')
	mainFile.displayName = findProperty('mod_name') + ' ' + findProperty('version')
	mainFile.releaseType = 'release'
	mainFile.addEnvironment('Client', 'Server')
	mainFile.addJavaVersion('21')
}

modrinth {
	token.set(System.getenv("MODRINTH_TOKEN"))
	projectId.set(findProperty('modrinth_project_id'))
	changelog.set(file('changelog.md').text)
	versionName.set(findProperty('mod_name') + ' ' + findProperty('version'))
	versionType.set("release")
	uploadFile.set(tasks.remapJar)
	dependencies {
		required.project("fabric-api")
	}
}
tasks.modrinth.dependsOn(tasks.remapJar)